{"uid":"b8c7cc44ccd33e60","name":"DR-TC226: Verificar obtención de lista de pacientes","fullName":"tests.Patient.test_DR_US_07_GET_patient#test_Verificar_obtencion_de_lista_de_pacientes","historyId":"bc562527d0e5e98ab23ae80a7c49e7e6","time":{"start":1761858921838,"stop":1761858922026,"duration":188},"status":"skipped","statusMessage":"XFAIL bug conocido: esta fallando por que el test case anterior creo un paciente con tipo de fisura vacio\n\nAssertionError: Campo 'fissure_type' vacío en item 2","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\n\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    @pytest.mark.regression\n    @pytest.mark.xfail(reason=\"bug conocido: esta fallando por que el test case anterior creo un paciente con tipo de fisura vacio\")\n    def test_Verificar_obtencion_de_lista_de_pacientes(get_url):\n        allure.dynamic.title(\"DR-TC226: Verificar obtención de lista de pacientes\")\n        response = request_function(StaticDataVerbs.get.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value)\n        assert_response_status_code(response.status_code, StaticStatus.ok.value)\n        assert_schema(response.json(), \"schema_200_get.json\", StaticDataModules.patients.name)\n>       assert_patients_list_format(response.json())\n\ntests/Patient/test_DR_US_07_GET_patient.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse_data = [{'address': 'string', 'city': 'string', 'country': 'BO', 'date_of_birth': '1999-07-05', ...}, {'address': '632 Long R...Skyway Suite 971\\nEast Austin, NV 18919', 'city': 'Port Jeffrey', 'country': 'BO', 'date_of_birth': '2010-04-23', ...}]\n\n    def assert_patients_list_format(response_data):\n        if isinstance(response_data, dict):\n            response_list = [response_data]\n        elif isinstance(response_data, list):\n            response_list = response_data\n        else:\n            raise AssertionError(f\"Respuesta inesperada: {type(response_data)}\")\n    \n        assert len(response_list) > 0, \"La lista de pacientes está vacía\"\n        nullable_fields = {\"city\", \"province\", \"address\", \"ref_number_2\"}\n    \n        for idx, prof in enumerate(response_list, start=1):\n            for field, value in prof.items():\n                if field not in nullable_fields:\n>                   assert value not in (\"\", None), f\"Campo '{field}' vacío en item {idx}\"\n                           ^^^^^^^^^^^^^^^^^^^^^^^\nE                   AssertionError: Campo 'fissure_type' vacío en item 2\n\nsrc/assertions/assertions_patient/assertions_patient.py:157: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: esta fallando por que el test case anterior creo un paciente con tipo de fisura vacio\n\nAssertionError: Campo 'fissure_type' vacío en item 2","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\n\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    @pytest.mark.regression\n    @pytest.mark.xfail(reason=\"bug conocido: esta fallando por que el test case anterior creo un paciente con tipo de fisura vacio\")\n    def test_Verificar_obtencion_de_lista_de_pacientes(get_url):\n        allure.dynamic.title(\"DR-TC226: Verificar obtención de lista de pacientes\")\n        response = request_function(StaticDataVerbs.get.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value)\n        assert_response_status_code(response.status_code, StaticStatus.ok.value)\n        assert_schema(response.json(), \"schema_200_get.json\", StaticDataModules.patients.name)\n>       assert_patients_list_format(response.json())\n\ntests/Patient/test_DR_US_07_GET_patient.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse_data = [{'address': 'string', 'city': 'string', 'country': 'BO', 'date_of_birth': '1999-07-05', ...}, {'address': '632 Long R...Skyway Suite 971\\nEast Austin, NV 18919', 'city': 'Port Jeffrey', 'country': 'BO', 'date_of_birth': '2010-04-23', ...}]\n\n    def assert_patients_list_format(response_data):\n        if isinstance(response_data, dict):\n            response_list = [response_data]\n        elif isinstance(response_data, list):\n            response_list = response_data\n        else:\n            raise AssertionError(f\"Respuesta inesperada: {type(response_data)}\")\n    \n        assert len(response_list) > 0, \"La lista de pacientes está vacía\"\n        nullable_fields = {\"city\", \"province\", \"address\", \"ref_number_2\"}\n    \n        for idx, prof in enumerate(response_list, start=1):\n            for field, value in prof.items():\n                if field not in nullable_fields:\n>                   assert value not in (\"\", None), f\"Campo '{field}' vacío en item {idx}\"\n                           ^^^^^^^^^^^^^^^^^^^^^^^\nE                   AssertionError: Campo 'fissure_type' vacío en item 2\n\nsrc/assertions/assertions_patient/assertions_patient.py:157: AssertionError","steps":[],"attachments":[{"uid":"c5044bda1d05d74d","name":"HTTP Method","source":"c5044bda1d05d74d.txt","type":"text/plain","size":3},{"uid":"cbe218cb53f24425","name":"Domain","source":"cbe218cb53f24425.txt","type":"text/plain","size":49},{"uid":"23a1216199d17df1","name":"Request URL","source":"23a1216199d17df1.txt","type":"text/plain","size":74},{"uid":"dda3d5c9e050745d","name":"Headers","source":"dda3d5c9e050745d.json","type":"application/json","size":254},{"uid":"1bc0d111fff49ac9","name":"Payload","source":"1bc0d111fff49ac9.json","type":"application/json","size":2},{"uid":"3f000c043af47c54","name":"Timestamp","source":"3f000c043af47c54.txt","type":"text/plain","size":19},{"uid":"34e62d307fc1be2","name":"Status Code","source":"34e62d307fc1be2.txt","type":"text/plain","size":3},{"uid":"3c78cd8aeef0621f","name":"Response Headers","source":"3c78cd8aeef0621f.json","type":"application/json","size":254},{"uid":"3641a0684682ca9c","name":"Response Payload","source":"3641a0684682ca9c.json","type":"application/json","size":2531},{"uid":"8abdbf4c1e5f8da2","name":"log","source":"8abdbf4c1e5f8da2.txt","type":"text/plain","size":3624}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_07_GET_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_07_GET_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["regression","smoke","positive"]},"source":"b8c7cc44ccd33e60.json","parameterValues":[]}