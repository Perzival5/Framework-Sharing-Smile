{"uid":"1b9928f6c6e17906","name":"DR-TC195: Verificar que no se registre un paciente con ref_number_2 inválido","fullName":"tests.Patient.test_DR_US_06_POST_patient#test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido","historyId":"27cd241ce5414726bc5b52bd7474a6c2","time":{"start":1761858888770,"stop":1761858890634,"duration":1864},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\n\nAssertionError: Status esperado 400, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC195', 'input': 'letras', 'item': 'ref_number_2'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se registre un paciente con {date['item']} inválido\")\n        request=build_patient_payload(**{date['item']: date['input']})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 400\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 400, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\n\nAssertionError: Status esperado 400, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC195', 'input': 'letras', 'item': 'ref_number_2'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se registre un paciente con {date['item']} inválido\")\n        request=build_patient_payload(**{date['item']: date['input']})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 400\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 400, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"c394eaeb4e4690f6","name":"HTTP Method","source":"c394eaeb4e4690f6.txt","type":"text/plain","size":4},{"uid":"9fd058b704fc41ec","name":"Domain","source":"9fd058b704fc41ec.txt","type":"text/plain","size":49},{"uid":"1a3340890ee5365c","name":"Request URL","source":"1a3340890ee5365c.txt","type":"text/plain","size":74},{"uid":"bea87b057b2e72bb","name":"Headers","source":"bea87b057b2e72bb.json","type":"application/json","size":254},{"uid":"bd6a8acd56b60644","name":"Payload","source":"bd6a8acd56b60644.json","type":"application/json","size":383},{"uid":"945367dd5dbe3a96","name":"Timestamp","source":"945367dd5dbe3a96.txt","type":"text/plain","size":19},{"uid":"b8b83aea67ff9a24","name":"Status Code","source":"b8b83aea67ff9a24.txt","type":"text/plain","size":3},{"uid":"90d622069da7a183","name":"Response Headers","source":"90d622069da7a183.json","type":"application/json","size":253},{"uid":"3d9b2fac60ecec5b","name":"Response Payload","source":"3d9b2fac60ecec5b.json","type":"application/json","size":520},{"uid":"f70fa542fb14d9b7","name":"log","source":"f70fa542fb14d9b7.txt","type":"text/plain","size":1992}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_06_POST_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_06_POST_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC195', 'item': 'ref_number_2', 'input': 'letras'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"1b9928f6c6e17906.json","parameterValues":["{'id': 'DR-TC195', 'item': 'ref_number_2', 'input': 'letras'}"]}