{"uid":"fe758fb00fd84db","name":"DR-TC289: Verificar que no se pueda actualizar country con un valor inválido","fullName":"tests.Patient.test_DR_US_08_PATCH_patient#test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido","historyId":"1d6e67793fa837009fa4dd71e7ac0605","time":{"start":1761859005764,"stop":1761859006010,"duration":246},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC289', 'input': 'BR', 'item': 'country'}\nsetup_patient = {'address': '384 Krista Knolls\\nVeronicatown, AL 84414', 'city': 'Josephton', 'country': 'MX', 'date_of_birth': '2023-08-25', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_patient","time":{"start":1761859004718,"stop":1761859005763,"duration":1045},"status":"passed","steps":[],"attachments":[{"uid":"e19ac5d4d1fc19a0","name":"HTTP Method","source":"e19ac5d4d1fc19a0.txt","type":"text/plain","size":4},{"uid":"dc4ac757a74ea936","name":"Domain","source":"dc4ac757a74ea936.txt","type":"text/plain","size":49},{"uid":"e3983c98b576dbae","name":"Request URL","source":"e3983c98b576dbae.txt","type":"text/plain","size":74},{"uid":"c6308cb9ea3c618f","name":"Headers","source":"c6308cb9ea3c618f.json","type":"application/json","size":254},{"uid":"85cf377e6f8ef51e","name":"Payload","source":"85cf377e6f8ef51e.json","type":"application/json","size":371},{"uid":"2bc7c46fb3fd48ee","name":"Timestamp","source":"2bc7c46fb3fd48ee.txt","type":"text/plain","size":19},{"uid":"560088bb712221e7","name":"Status Code","source":"560088bb712221e7.txt","type":"text/plain","size":3},{"uid":"712b6b3f66185f1d","name":"Response Headers","source":"712b6b3f66185f1d.json","type":"application/json","size":253},{"uid":"a95efdf9c9d1c730","name":"Response Payload","source":"a95efdf9c9d1c730.json","type":"application/json","size":508}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC289', 'input': 'BR', 'item': 'country'}\nsetup_patient = {'address': '384 Krista Knolls\\nVeronicatown, AL 84414', 'city': 'Josephton', 'country': 'MX', 'date_of_birth': '2023-08-25', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"d3205848103ec254","name":"HTTP Method","source":"d3205848103ec254.txt","type":"text/plain","size":5},{"uid":"4aa9b80ef5674ab9","name":"Domain","source":"4aa9b80ef5674ab9.txt","type":"text/plain","size":49},{"uid":"92943657c03481ae","name":"Request URL","source":"92943657c03481ae.txt","type":"text/plain","size":77},{"uid":"7e53bc2f4756cfae","name":"Headers","source":"7e53bc2f4756cfae.json","type":"application/json","size":254},{"uid":"84d63fd658688384","name":"Payload","source":"84d63fd658688384.json","type":"application/json","size":17},{"uid":"11da0a4413d2eb18","name":"Timestamp","source":"11da0a4413d2eb18.txt","type":"text/plain","size":19},{"uid":"74de4c72e63a48d8","name":"Status Code","source":"74de4c72e63a48d8.txt","type":"text/plain","size":3},{"uid":"c9b1c8bb07cbbf7d","name":"Response Headers","source":"c9b1c8bb07cbbf7d.json","type":"application/json","size":257},{"uid":"a3545e08b0172ee4","name":"Response Payload","source":"a3545e08b0172ee4.json","type":"application/json","size":508},{"uid":"7bf0e0342c41f0d3","name":"log","source":"7bf0e0342c41f0d3.txt","type":"text/plain","size":4631}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[{"name":"setup_patient::0","time":{"start":1761859006019,"stop":1761859006341,"duration":322},"status":"passed","steps":[],"attachments":[{"uid":"afdc4e07f7a947a1","name":"HTTP Method","source":"afdc4e07f7a947a1.txt","type":"text/plain","size":6},{"uid":"6f7e27112ab4a92d","name":"Domain","source":"6f7e27112ab4a92d.txt","type":"text/plain","size":49},{"uid":"7d2846dfb852414f","name":"Request URL","source":"7d2846dfb852414f.txt","type":"text/plain","size":77},{"uid":"fecd1174da37eb10","name":"Headers","source":"fecd1174da37eb10.json","type":"application/json","size":224},{"uid":"64d9d1858403bdf9","name":"Payload","source":"64d9d1858403bdf9.json","type":"application/json","size":2},{"uid":"d2a93d0915358d3a","name":"Timestamp","source":"d2a93d0915358d3a.txt","type":"text/plain","size":19},{"uid":"a8006a4ffedd33","name":"Status Code","source":"a8006a4ffedd33.txt","type":"text/plain","size":3},{"uid":"e40a225e71fe93d1","name":"Response Headers","source":"e40a225e71fe93d1.json","type":"application/json","size":228},{"uid":"3dc71c71b91cecde","name":"Response Text","source":"3dc71c71b91cecde.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_08_PATCH_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_08_PATCH_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC289', 'item': 'country', 'input': 'BR'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"fe758fb00fd84db.json","parameterValues":["{'id': 'DR-TC289', 'item': 'country', 'input': 'BR'}"]}