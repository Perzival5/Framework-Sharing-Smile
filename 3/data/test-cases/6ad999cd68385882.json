{"uid":"6ad999cd68385882","name":"DR-TC193: Verificar que no se registre un paciente con dni inválido","fullName":"tests.Patient.test_DR_US_06_POST_patient#test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido","historyId":"e65f224ba02d17e1a17994ac6906d004","time":{"start":1761858884933,"stop":1761858886834,"duration":1901},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\n\nAssertionError: Status esperado 400, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC193', 'input': '&&&&@@@@@@', 'item': 'dni'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se registre un paciente con {date['item']} inválido\")\n        request=build_patient_payload(**{date['item']: date['input']})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 400\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 400, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\n\nAssertionError: Status esperado 400, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC193', 'input': '&&&&@@@@@@', 'item': 'dni'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1 y ref_number_2 se esta registrando con formato invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_con_datos_en_formato_invalido(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se registre un paciente con {date['item']} inválido\")\n        request=build_patient_payload(**{date['item']: date['input']})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 400\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 400, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"c11005af762894c","name":"HTTP Method","source":"c11005af762894c.txt","type":"text/plain","size":4},{"uid":"49abca44a5a92505","name":"Domain","source":"49abca44a5a92505.txt","type":"text/plain","size":49},{"uid":"da49a5fae795a63a","name":"Request URL","source":"da49a5fae795a63a.txt","type":"text/plain","size":74},{"uid":"3751776754cb3d76","name":"Headers","source":"3751776754cb3d76.json","type":"application/json","size":254},{"uid":"f5b6a4a063df96c0","name":"Payload","source":"f5b6a4a063df96c0.json","type":"application/json","size":378},{"uid":"85c321d163d09e7f","name":"Timestamp","source":"85c321d163d09e7f.txt","type":"text/plain","size":19},{"uid":"147d7c38b32e5f75","name":"Status Code","source":"147d7c38b32e5f75.txt","type":"text/plain","size":3},{"uid":"1c96261e21bd8d4d","name":"Response Headers","source":"1c96261e21bd8d4d.json","type":"application/json","size":253},{"uid":"673796443430b1b8","name":"Response Payload","source":"673796443430b1b8.json","type":"application/json","size":515},{"uid":"769b030d61522e04","name":"log","source":"769b030d61522e04.txt","type":"text/plain","size":1982}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_06_POST_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_06_POST_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC193', 'item': 'dni', 'input': '&&&&@@@@@@'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"6ad999cd68385882.json","parameterValues":["{'id': 'DR-TC193', 'item': 'dni', 'input': '&&&&@@@@@@'}"]}