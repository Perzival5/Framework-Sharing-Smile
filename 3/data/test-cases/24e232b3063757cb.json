{"uid":"24e232b3063757cb","name":"DR-TC131: Verificar que no se pueda actualizar phone con un valor inválido","fullName":"tests.Professional.test_DR_US_04_PATCH_professional#test_Verificar_que_no_se_pueda_actualizar_un_profesional_con_un_valor_invalido","historyId":"ae11944677ec117d3255185097f03d27","time":{"start":1761859172612,"stop":1761859172855,"duration":243},"status":"skipped","statusMessage":"XFAIL bug conocido: el campo phone permite actualizar solo con letras que es un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC131', 'input': 'letras', 'item': 'phone'}\nsetup_professional = {'address': '16439 Charles Lodge\\nSaundersfort, HI 76357', 'city': 'Lauramouth', 'country': 'US', 'date_of_birth': '1975-12-01', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el campo phone permite actualizar solo con letras que es un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_profesional_con_un_valor_invalido(get_url,date,setup_professional):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.professionals.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.professionals.value}{setup_professional['id']}\",\n                                    header_type=StaticDataHeaders.header_professional.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Professional/test_DR_US_04_PATCH_professional.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_professional","time":{"start":1761859171549,"stop":1761859172612,"duration":1063},"status":"passed","steps":[],"attachments":[{"uid":"d04112abbd82e98d","name":"HTTP Method","source":"d04112abbd82e98d.txt","type":"text/plain","size":4},{"uid":"692d2545d3fcd2b0","name":"Domain","source":"692d2545d3fcd2b0.txt","type":"text/plain","size":49},{"uid":"4fa97bccc3c242ab","name":"Request URL","source":"4fa97bccc3c242ab.txt","type":"text/plain","size":79},{"uid":"a4b702bfbe7d8afd","name":"Headers","source":"a4b702bfbe7d8afd.json","type":"application/json","size":250},{"uid":"ed6452d9fbe55037","name":"Payload","source":"ed6452d9fbe55037.json","type":"application/json","size":389},{"uid":"7ec124399c6da405","name":"Timestamp","source":"7ec124399c6da405.txt","type":"text/plain","size":19},{"uid":"32fc52ade5001d2f","name":"Status Code","source":"32fc52ade5001d2f.txt","type":"text/plain","size":3},{"uid":"430ce4154b517226","name":"Response Headers","source":"430ce4154b517226.json","type":"application/json","size":253},{"uid":"b8f462395a594e1","name":"Response Payload","source":"b8f462395a594e1.json","type":"application/json","size":497}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: el campo phone permite actualizar solo con letras que es un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC131', 'input': 'letras', 'item': 'phone'}\nsetup_professional = {'address': '16439 Charles Lodge\\nSaundersfort, HI 76357', 'city': 'Lauramouth', 'country': 'US', 'date_of_birth': '1975-12-01', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el campo phone permite actualizar solo con letras que es un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_profesional_con_un_valor_invalido(get_url,date,setup_professional):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.professionals.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.professionals.value}{setup_professional['id']}\",\n                                    header_type=StaticDataHeaders.header_professional.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Professional/test_DR_US_04_PATCH_professional.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"7a7478b71dd9a5fa","name":"HTTP Method","source":"7a7478b71dd9a5fa.txt","type":"text/plain","size":5},{"uid":"57b40731636b0a24","name":"Domain","source":"57b40731636b0a24.txt","type":"text/plain","size":49},{"uid":"a2d6ed5bcd12ea5","name":"Request URL","source":"a2d6ed5bcd12ea5.txt","type":"text/plain","size":83},{"uid":"bedcb6630305ede4","name":"Headers","source":"bedcb6630305ede4.json","type":"application/json","size":250},{"uid":"fa0c34d79b56b951","name":"Payload","source":"fa0c34d79b56b951.json","type":"application/json","size":19},{"uid":"772b44ee9212b4e2","name":"Timestamp","source":"772b44ee9212b4e2.txt","type":"text/plain","size":19},{"uid":"34dbbdab56e87907","name":"Status Code","source":"34dbbdab56e87907.txt","type":"text/plain","size":3},{"uid":"d14d943a3ad6209f","name":"Response Headers","source":"d14d943a3ad6209f.json","type":"application/json","size":257},{"uid":"3f99c0a1e0cf1121","name":"Response Payload","source":"3f99c0a1e0cf1121.json","type":"application/json","size":495},{"uid":"1954f12a8eed26c1","name":"log","source":"1954f12a8eed26c1.txt","type":"text/plain","size":4632}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[{"name":"setup_professional::0","time":{"start":1761859172863,"stop":1761859173059,"duration":196},"status":"passed","steps":[],"attachments":[{"uid":"d1a3523e5c001479","name":"HTTP Method","source":"d1a3523e5c001479.txt","type":"text/plain","size":6},{"uid":"c9b02f844c33aaa3","name":"Domain","source":"c9b02f844c33aaa3.txt","type":"text/plain","size":49},{"uid":"2e9548a042a77ff9","name":"Request URL","source":"2e9548a042a77ff9.txt","type":"text/plain","size":83},{"uid":"67c6afb08b9872cd","name":"Headers","source":"67c6afb08b9872cd.json","type":"application/json","size":220},{"uid":"bab6c709faa4102","name":"Payload","source":"bab6c709faa4102.json","type":"application/json","size":2},{"uid":"fcfb55ec091db75a","name":"Timestamp","source":"fcfb55ec091db75a.txt","type":"text/plain","size":19},{"uid":"a4ec73847db8cc93","name":"Status Code","source":"a4ec73847db8cc93.txt","type":"text/plain","size":3},{"uid":"810e3e8ec5c1919f","name":"Response Headers","source":"810e3e8ec5c1919f.json","type":"application/json","size":228},{"uid":"f768c94df94834cc","name":"Response Text","source":"f768c94df94834cc.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Professional"},{"name":"suite","value":"test_DR_US_04_PATCH_professional"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Professional.test_DR_US_04_PATCH_professional"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC131', 'item': 'phone', 'input': 'letras'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"24e232b3063757cb.json","parameterValues":["{'id': 'DR-TC131', 'item': 'phone', 'input': 'letras'}"]}