{"uid":"53b770c39f5e7994","name":"DR-TC175: Verificar que no se pueda registrar un paciente sin fissure_type","fullName":"tests.Patient.test_DR_US_06_POST_patient#test_Verificar_que_no_se_pueda_registrar_un_paciente_sin","historyId":"ad08c9f0459f314b2be7ec21a39cd0b9","time":{"start":1761858863398,"stop":1761858865438,"duration":2040},"status":"skipped","statusMessage":"XFAIL bug conocido: el campo de tipo de fisura es obligatorio y no puede ser vacio\n\nAssertionError: Status esperado 422, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ninput = {'id': 'DR-TC175', 'item': 'fissure_type'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el campo de tipo de fisura es obligatorio y no puede ser vacio\")\n    @pytest.mark.parametrize(\"input\", register)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_sin(get_url,input):\n        allure.dynamic.title(f\"{input['id']}: Verificar que no se pueda registrar un paciente sin {input['item']}\")\n        request=build_patient_payload(**{input['item']: \"\"})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.unprocessable_entity.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 422\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 422, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: el campo de tipo de fisura es obligatorio y no puede ser vacio\n\nAssertionError: Status esperado 422, Status obtenido 201","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ninput = {'id': 'DR-TC175', 'item': 'fissure_type'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el campo de tipo de fisura es obligatorio y no puede ser vacio\")\n    @pytest.mark.parametrize(\"input\", register)\n    def test_Verificar_que_no_se_pueda_registrar_un_paciente_sin(get_url,input):\n        allure.dynamic.title(f\"{input['id']}: Verificar que no se pueda registrar un paciente sin {input['item']}\")\n        request=build_patient_payload(**{input['item']: \"\"})\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        response = request_function(StaticDataVerbs.post.value, get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_response_status_code(response.status_code, StaticStatus.unprocessable_entity.value)\n\ntests/Patient/test_DR_US_06_POST_patient.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 201, expected_code = 422\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 422, Status obtenido 201\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"6c3a4b8430fdf4b8","name":"HTTP Method","source":"6c3a4b8430fdf4b8.txt","type":"text/plain","size":4},{"uid":"bd0349b0752b4809","name":"Domain","source":"bd0349b0752b4809.txt","type":"text/plain","size":49},{"uid":"ebe5796a2fd3051a","name":"Request URL","source":"ebe5796a2fd3051a.txt","type":"text/plain","size":74},{"uid":"5b5d296813f7f6e2","name":"Headers","source":"5b5d296813f7f6e2.json","type":"application/json","size":254},{"uid":"cdd1945b53ad6afd","name":"Payload","source":"cdd1945b53ad6afd.json","type":"application/json","size":362},{"uid":"2c6a5dc5ac51bcea","name":"Timestamp","source":"2c6a5dc5ac51bcea.txt","type":"text/plain","size":19},{"uid":"d14c7f1adbe45bd","name":"Status Code","source":"d14c7f1adbe45bd.txt","type":"text/plain","size":3},{"uid":"248cc243a5bc22f6","name":"Response Headers","source":"248cc243a5bc22f6.json","type":"application/json","size":253},{"uid":"277eed9bd0ecee49","name":"Response Payload","source":"277eed9bd0ecee49.json","type":"application/json","size":501},{"uid":"83dca3bb99284e06","name":"log","source":"83dca3bb99284e06.txt","type":"text/plain","size":1952}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_06_POST_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_06_POST_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"input","value":"{'id': 'DR-TC175', 'item': 'fissure_type'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"53b770c39f5e7994.json","parameterValues":["{'id': 'DR-TC175', 'item': 'fissure_type'}"]}