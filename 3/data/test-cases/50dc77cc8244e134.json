{"uid":"50dc77cc8244e134","name":"DR-TC327: Verificar que no se pueda obtener el registro fotográfico de un paciente con ID que no existente","fullName":"tests.Patient.test_DR_US_11_GET_patient_photographic_record#test_Verificar_que_no_se_pueda_obtener_el_registro_fotografico_de_un_paciente_con_ID_que_no_existe","historyId":"db01acf6d2c0aca16ced982e1d9671af","time":{"start":1761859052231,"stop":1761859052411,"duration":180},"status":"skipped","statusMessage":"XFAIL bug conocido: se mando un id que no existe y esta devolviendo algo vacio pero con status 200\n\nAssertionError: Status esperado 404, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'input': 2654555613, 'title': 'que no existente'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: se mando un id que no existe y esta devolviendo algo vacio pero con status 200\")\n    @pytest.mark.parametrize(\"date\", id_not_exist)\n    def test_Verificar_que_no_se_pueda_obtener_el_registro_fotografico_de_un_paciente_con_ID_que_no_existe(get_url, date):\n        allure.dynamic.title(\"DR-TC327: Verificar que no se pueda obtener el registro fotográfico de un paciente con ID que no existente\")\n        response = request_function(StaticDataVerbs.get.value, get_url, f\"{StaticDataModules.patients.value}{date['input']}{StaticDataModules.photo.value}\",\n                                    header_type=StaticDataHeaders.header_patient.value)\n>       assert_response_status_code(response.status_code, StaticStatus.not_found.value)\n\ntests/Patient/test_DR_US_11_GET_patient_photographic_record.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 404\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 404, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: se mando un id que no existe y esta devolviendo algo vacio pero con status 200\n\nAssertionError: Status esperado 404, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'input': 2654555613, 'title': 'que no existente'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: se mando un id que no existe y esta devolviendo algo vacio pero con status 200\")\n    @pytest.mark.parametrize(\"date\", id_not_exist)\n    def test_Verificar_que_no_se_pueda_obtener_el_registro_fotografico_de_un_paciente_con_ID_que_no_existe(get_url, date):\n        allure.dynamic.title(\"DR-TC327: Verificar que no se pueda obtener el registro fotográfico de un paciente con ID que no existente\")\n        response = request_function(StaticDataVerbs.get.value, get_url, f\"{StaticDataModules.patients.value}{date['input']}{StaticDataModules.photo.value}\",\n                                    header_type=StaticDataHeaders.header_patient.value)\n>       assert_response_status_code(response.status_code, StaticStatus.not_found.value)\n\ntests/Patient/test_DR_US_11_GET_patient_photographic_record.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 404\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 404, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"95574bdee822e557","name":"HTTP Method","source":"95574bdee822e557.txt","type":"text/plain","size":3},{"uid":"dc631bcf2e92a5ad","name":"Domain","source":"dc631bcf2e92a5ad.txt","type":"text/plain","size":49},{"uid":"a4b3764255e7a83d","name":"Request URL","source":"a4b3764255e7a83d.txt","type":"text/plain","size":106},{"uid":"48e959197e5d81e7","name":"Headers","source":"48e959197e5d81e7.json","type":"application/json","size":254},{"uid":"8a8bc6442a85eea1","name":"Payload","source":"8a8bc6442a85eea1.json","type":"application/json","size":2},{"uid":"e9aabe68d34ec18e","name":"Timestamp","source":"e9aabe68d34ec18e.txt","type":"text/plain","size":19},{"uid":"b13f75736e3d6050","name":"Status Code","source":"b13f75736e3d6050.txt","type":"text/plain","size":3},{"uid":"b81e557728cbbefe","name":"Response Headers","source":"b81e557728cbbefe.json","type":"application/json","size":251},{"uid":"a61e8c5ebabc0fb3","name":"Response Payload","source":"a61e8c5ebabc0fb3.json","type":"application/json","size":2},{"uid":"30d883b18e603381","name":"log","source":"30d883b18e603381.txt","type":"text/plain","size":1124}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_11_GET_patient_photographic_record"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_11_GET_patient_photographic_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'input': 2654555613, 'title': 'que no existente'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"50dc77cc8244e134.json","parameterValues":["{'input': 2654555613, 'title': 'que no existente'}"]}