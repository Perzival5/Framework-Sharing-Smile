{"uid":"219ad079d5f1642","name":"DR-TC50: Verificar fallo en el registro de profesional con método HTTP incorrecto GET","fullName":"tests.Professional.test_DR_US_02_POST_professional#test_Verificar_fallo_en_el_registro_de_profesional_con_metodo_HTTP_incorrecto","historyId":"9e4793ee9941b62895febec058f1b4ab","time":{"start":1761859076591,"stop":1761859076737,"duration":146},"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC50', 'item': 'GET'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"date\", http_methods_invalid)\n    def test_Verificar_fallo_en_el_registro_de_profesional_con_metodo_HTTP_incorrecto(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar fallo en el registro de profesional con método HTTP incorrecto {date['item']}\")\n        request=build_user_payload()\n        assert_schema(request, \"schema_input.json\", StaticDataModules.professionals.name)\n        assert_payload_professional(request)\n        response = request_function(date['item'], get_url, StaticDataModules.professionals.value,\n                                    header_type=StaticDataHeaders.header_professional.value, payload=request, files=get_file_profile())\n>       assert_responde_falled_http(response, StaticDataModules.professionals.name, date['id'])\n\ntests/Professional/test_DR_US_02_POST_professional.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'professionals', type = 'DR-TC50'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC50\" or type == \"DR-TC152\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_professional/assertions_professional.py:126: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC50', 'item': 'GET'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"date\", http_methods_invalid)\n    def test_Verificar_fallo_en_el_registro_de_profesional_con_metodo_HTTP_incorrecto(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar fallo en el registro de profesional con método HTTP incorrecto {date['item']}\")\n        request=build_user_payload()\n        assert_schema(request, \"schema_input.json\", StaticDataModules.professionals.name)\n        assert_payload_professional(request)\n        response = request_function(date['item'], get_url, StaticDataModules.professionals.value,\n                                    header_type=StaticDataHeaders.header_professional.value, payload=request, files=get_file_profile())\n>       assert_responde_falled_http(response, StaticDataModules.professionals.name, date['id'])\n\ntests/Professional/test_DR_US_02_POST_professional.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'professionals', type = 'DR-TC50'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC50\" or type == \"DR-TC152\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_professional/assertions_professional.py:126: AssertionError","steps":[],"attachments":[{"uid":"1ae115f4ab9b5fb7","name":"HTTP Method","source":"1ae115f4ab9b5fb7.txt","type":"text/plain","size":3},{"uid":"56425951baef638e","name":"Domain","source":"56425951baef638e.txt","type":"text/plain","size":49},{"uid":"ceaa86cfff5c2a2","name":"Request URL","source":"ceaa86cfff5c2a2.txt","type":"text/plain","size":79},{"uid":"843e028234c5c0ec","name":"Headers","source":"843e028234c5c0ec.json","type":"application/json","size":250},{"uid":"6fc719a3f9fa3253","name":"Payload","source":"6fc719a3f9fa3253.json","type":"application/json","size":384},{"uid":"d8de45858d0b9d39","name":"Timestamp","source":"d8de45858d0b9d39.txt","type":"text/plain","size":19},{"uid":"42c5909abd142b6","name":"Status Code","source":"42c5909abd142b6.txt","type":"text/plain","size":3},{"uid":"31c0f854330f619d","name":"Response Headers","source":"31c0f854330f619d.json","type":"application/json","size":145},{"uid":"358431e087f934c7","name":"Response Text","source":"358431e087f934c7.txt","type":"text/plain","size":1555},{"uid":"a60717da23db8483","name":"log","source":"a60717da23db8483.txt","type":"text/plain","size":2916}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"trivial"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Professional"},{"name":"suite","value":"test_DR_US_02_POST_professional"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Professional.test_DR_US_02_POST_professional"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC50', 'item': 'GET'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[],"tags":["negative","regression"]},"source":"219ad079d5f1642.json","parameterValues":["{'id': 'DR-TC50', 'item': 'GET'}"]}