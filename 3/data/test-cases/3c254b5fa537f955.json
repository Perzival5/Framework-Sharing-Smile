{"uid":"3c254b5fa537f955","name":"DR-TC09: Verificar login fallido con método HTTP incorrecto GET","fullName":"tests.Login.test_DR_US_01_Login#test_Verificar_login_fallido_con_metodo_HTTP_incorrecto","historyId":"e06765c9cec33084bc78c53515886a76","time":{"start":1761858852647,"stop":1761858852790,"duration":143},"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\nhttp = {'id': 'DR-TC09', 'method': 'GET', 'password': 'admin', 'username': 'david.rodriguez@project-x.com'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"http\", http_methods_invalid)\n    def test_Verificar_login_fallido_con_metodo_HTTP_incorrecto(get_url, http):\n        allure.dynamic.title(f\"{http['id']}: Verificar login fallido con método HTTP incorrecto {http['method']}\")\n        request=login_payload(http[\"username\"], http[\"password\"])\n        assert_schema(request, \"schema_input.json\", StaticDataModules.login.name)\n        assert_payload(request, http[\"username\"], http[\"password\"])\n        response = request_function(http[\"method\"], get_url, StaticDataModules.login.value,\n                                    header_type=StaticDataHeaders.header_login.value, payload=request)\n>       assert_responde_falled_http(response, StaticDataModules.login.name, http[\"id\"])\n\ntests/Login/test_DR_US_01_Login.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'login', type = 'DR-TC09'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC09\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_login/assertions_login.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\nhttp = {'id': 'DR-TC09', 'method': 'GET', 'password': 'admin', 'username': 'david.rodriguez@project-x.com'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"http\", http_methods_invalid)\n    def test_Verificar_login_fallido_con_metodo_HTTP_incorrecto(get_url, http):\n        allure.dynamic.title(f\"{http['id']}: Verificar login fallido con método HTTP incorrecto {http['method']}\")\n        request=login_payload(http[\"username\"], http[\"password\"])\n        assert_schema(request, \"schema_input.json\", StaticDataModules.login.name)\n        assert_payload(request, http[\"username\"], http[\"password\"])\n        response = request_function(http[\"method\"], get_url, StaticDataModules.login.value,\n                                    header_type=StaticDataHeaders.header_login.value, payload=request)\n>       assert_responde_falled_http(response, StaticDataModules.login.name, http[\"id\"])\n\ntests/Login/test_DR_US_01_Login.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'login', type = 'DR-TC09'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC09\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_login/assertions_login.py:38: AssertionError","steps":[],"attachments":[{"uid":"86459e108f6578bc","name":"HTTP Method","source":"86459e108f6578bc.txt","type":"text/plain","size":3},{"uid":"19049431ec47ca33","name":"Domain","source":"19049431ec47ca33.txt","type":"text/plain","size":49},{"uid":"babbc9b50858b228","name":"Request URL","source":"babbc9b50858b228.txt","type":"text/plain","size":75},{"uid":"21d48fba292e62ad","name":"Headers","source":"21d48fba292e62ad.json","type":"application/json","size":30},{"uid":"5fd7a7740b979c8f","name":"Payload","source":"5fd7a7740b979c8f.json","type":"application/json","size":66},{"uid":"804958a3cecb459d","name":"Timestamp","source":"804958a3cecb459d.txt","type":"text/plain","size":19},{"uid":"8146ff5eb6c09ec","name":"Status Code","source":"8146ff5eb6c09ec.txt","type":"text/plain","size":3},{"uid":"fd98369b1469c0c0","name":"Response Headers","source":"fd98369b1469c0c0.json","type":"application/json","size":145},{"uid":"7153e15845daab83","name":"Response Text","source":"7153e15845daab83.txt","type":"text/plain","size":1555},{"uid":"2996c4d4c939545b","name":"log","source":"2996c4d4c939545b.txt","type":"text/plain","size":2374}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"trivial"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Login"},{"name":"suite","value":"test_DR_US_01_Login"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Login.test_DR_US_01_Login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"http","value":"{'id': 'DR-TC09', 'method': 'GET', 'username': 'david.rodriguez@project-x.com', 'password': 'admin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[],"tags":["negative","regression"]},"source":"3c254b5fa537f955.json","parameterValues":["{'id': 'DR-TC09', 'method': 'GET', 'username': 'david.rodriguez@project-x.com', 'password': 'admin'}"]}