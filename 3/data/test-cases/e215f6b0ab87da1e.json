{"uid":"e215f6b0ab87da1e","name":"DR-TC291: Verificar que no se pueda actualizar dni con un valor inválido","fullName":"tests.Patient.test_DR_US_08_PATCH_patient#test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido","historyId":"83389bf99737417e9562deb15d6f798d","time":{"start":1761859008917,"stop":1761859009129,"duration":212},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC291', 'input': 'letras', 'item': 'dni'}\nsetup_patient = {'address': '50208 Jackson Trail\\nGonzalesmouth, NY 73013', 'city': 'East Mary', 'country': 'DO', 'date_of_birth': '2009-08-01', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_patient","time":{"start":1761859007864,"stop":1761859008917,"duration":1053},"status":"passed","steps":[],"attachments":[{"uid":"7c63d4976c99c516","name":"HTTP Method","source":"7c63d4976c99c516.txt","type":"text/plain","size":4},{"uid":"7c9dc1535faad2a4","name":"Domain","source":"7c9dc1535faad2a4.txt","type":"text/plain","size":49},{"uid":"bf21254914a98ee7","name":"Request URL","source":"bf21254914a98ee7.txt","type":"text/plain","size":74},{"uid":"af7f131a4b14305","name":"Headers","source":"af7f131a4b14305.json","type":"application/json","size":254},{"uid":"19b3d13dd41ba517","name":"Payload","source":"19b3d13dd41ba517.json","type":"application/json","size":376},{"uid":"c4336614dd9bedb7","name":"Timestamp","source":"c4336614dd9bedb7.txt","type":"text/plain","size":19},{"uid":"a85085f1d2df8fb0","name":"Status Code","source":"a85085f1d2df8fb0.txt","type":"text/plain","size":3},{"uid":"338f23dc23e3c902","name":"Response Headers","source":"338f23dc23e3c902.json","type":"application/json","size":253},{"uid":"671bd5bf51c0089f","name":"Response Payload","source":"671bd5bf51c0089f.json","type":"application/json","size":513}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC291', 'input': 'letras', 'item': 'dni'}\nsetup_patient = {'address': '50208 Jackson Trail\\nGonzalesmouth, NY 73013', 'city': 'East Mary', 'country': 'DO', 'date_of_birth': '2009-08-01', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"960a559a27be727c","name":"HTTP Method","source":"960a559a27be727c.txt","type":"text/plain","size":5},{"uid":"1f765fb16a71251d","name":"Domain","source":"1f765fb16a71251d.txt","type":"text/plain","size":49},{"uid":"512b299141d95ca4","name":"Request URL","source":"512b299141d95ca4.txt","type":"text/plain","size":77},{"uid":"b2f7c965bb06f1f4","name":"Headers","source":"b2f7c965bb06f1f4.json","type":"application/json","size":254},{"uid":"f8e8f70137ee7f5e","name":"Payload","source":"f8e8f70137ee7f5e.json","type":"application/json","size":17},{"uid":"ce638b9a4eb2c7dc","name":"Timestamp","source":"ce638b9a4eb2c7dc.txt","type":"text/plain","size":19},{"uid":"798074d24d07e0ba","name":"Status Code","source":"798074d24d07e0ba.txt","type":"text/plain","size":3},{"uid":"2469e2af270fbcd4","name":"Response Headers","source":"2469e2af270fbcd4.json","type":"application/json","size":253},{"uid":"1927a542b76e6a58","name":"Response Payload","source":"1927a542b76e6a58.json","type":"application/json","size":511},{"uid":"af9853612ae3660a","name":"log","source":"af9853612ae3660a.txt","type":"text/plain","size":4640}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[{"name":"setup_patient::0","time":{"start":1761859009138,"stop":1761859009333,"duration":195},"status":"passed","steps":[],"attachments":[{"uid":"6c9f6df75a374e23","name":"HTTP Method","source":"6c9f6df75a374e23.txt","type":"text/plain","size":6},{"uid":"e9d37d65780e2348","name":"Domain","source":"e9d37d65780e2348.txt","type":"text/plain","size":49},{"uid":"a0ab589e0734cbdf","name":"Request URL","source":"a0ab589e0734cbdf.txt","type":"text/plain","size":77},{"uid":"61e99e0acfd63ffc","name":"Headers","source":"61e99e0acfd63ffc.json","type":"application/json","size":224},{"uid":"2235da863545d6eb","name":"Payload","source":"2235da863545d6eb.json","type":"application/json","size":2},{"uid":"13dc6395f0f7af24","name":"Timestamp","source":"13dc6395f0f7af24.txt","type":"text/plain","size":19},{"uid":"fa402eb0be2f779e","name":"Status Code","source":"fa402eb0be2f779e.txt","type":"text/plain","size":3},{"uid":"125defa09e0480bc","name":"Response Headers","source":"125defa09e0480bc.json","type":"application/json","size":228},{"uid":"335a382792367361","name":"Response Text","source":"335a382792367361.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_08_PATCH_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_08_PATCH_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC291', 'item': 'dni', 'input': 'letras'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"e215f6b0ab87da1e.json","parameterValues":["{'id': 'DR-TC291', 'item': 'dni', 'input': 'letras'}"]}