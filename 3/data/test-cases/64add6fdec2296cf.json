{"uid":"64add6fdec2296cf","name":"DR-TC292: Verificar que no se pueda actualizar ref_number_1 con un valor inválido","fullName":"tests.Patient.test_DR_US_08_PATCH_patient#test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido","historyId":"1e9e087f986c2c3cc3da2b4ed8405c19","time":{"start":1761859010401,"stop":1761859010642,"duration":241},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC292', 'input': 'letras', 'item': 'ref_number_1'}\nsetup_patient = {'address': '89668 Maria Fort\\nEast Tonyamouth, MD 08519', 'city': 'North Heidi', 'country': 'BO', 'date_of_birth': '2013-06-09', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_patient","time":{"start":1761859009335,"stop":1761859010401,"duration":1066},"status":"passed","steps":[],"attachments":[{"uid":"38453c0c509033f0","name":"HTTP Method","source":"38453c0c509033f0.txt","type":"text/plain","size":4},{"uid":"53e35d5b1792e851","name":"Domain","source":"53e35d5b1792e851.txt","type":"text/plain","size":49},{"uid":"dc7cd53032f3a7ac","name":"Request URL","source":"dc7cd53032f3a7ac.txt","type":"text/plain","size":74},{"uid":"2df993d5d4c8d6df","name":"Headers","source":"2df993d5d4c8d6df.json","type":"application/json","size":254},{"uid":"c1e2615617693b6f","name":"Payload","source":"c1e2615617693b6f.json","type":"application/json","size":377},{"uid":"719703713654e5e2","name":"Timestamp","source":"719703713654e5e2.txt","type":"text/plain","size":19},{"uid":"f703610dca1a4941","name":"Status Code","source":"f703610dca1a4941.txt","type":"text/plain","size":3},{"uid":"9012acb9870b2f09","name":"Response Headers","source":"9012acb9870b2f09.json","type":"application/json","size":253},{"uid":"49bc5e848ca70019","name":"Response Payload","source":"49bc5e848ca70019.json","type":"application/json","size":514}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC292', 'input': 'letras', 'item': 'ref_number_1'}\nsetup_patient = {'address': '89668 Maria Fort\\nEast Tonyamouth, MD 08519', 'city': 'North Heidi', 'country': 'BO', 'date_of_birth': '2013-06-09', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"523016518c7e29b7","name":"HTTP Method","source":"523016518c7e29b7.txt","type":"text/plain","size":5},{"uid":"bb060b1a0720ee16","name":"Domain","source":"bb060b1a0720ee16.txt","type":"text/plain","size":49},{"uid":"acc1a477a5360e15","name":"Request URL","source":"acc1a477a5360e15.txt","type":"text/plain","size":77},{"uid":"bdeb485f7601b5e2","name":"Headers","source":"bdeb485f7601b5e2.json","type":"application/json","size":254},{"uid":"bcc4ef6622e36cb2","name":"Payload","source":"bcc4ef6622e36cb2.json","type":"application/json","size":26},{"uid":"f313be799af2fe94","name":"Timestamp","source":"f313be799af2fe94.txt","type":"text/plain","size":19},{"uid":"b4fc18460f82e999","name":"Status Code","source":"b4fc18460f82e999.txt","type":"text/plain","size":3},{"uid":"15656297de1d6714","name":"Response Headers","source":"15656297de1d6714.json","type":"application/json","size":253},{"uid":"b214a23c30884023","name":"Response Payload","source":"b214a23c30884023.json","type":"application/json","size":512},{"uid":"e9fa9ba7c15e7c3e","name":"log","source":"e9fa9ba7c15e7c3e.txt","type":"text/plain","size":4652}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[{"name":"setup_patient::0","time":{"start":1761859010652,"stop":1761859010850,"duration":198},"status":"passed","steps":[],"attachments":[{"uid":"6728c10a33cb6b7e","name":"HTTP Method","source":"6728c10a33cb6b7e.txt","type":"text/plain","size":6},{"uid":"ce9ddccfea6409e0","name":"Domain","source":"ce9ddccfea6409e0.txt","type":"text/plain","size":49},{"uid":"480032d84854d78f","name":"Request URL","source":"480032d84854d78f.txt","type":"text/plain","size":77},{"uid":"3fd9d3d540b0e630","name":"Headers","source":"3fd9d3d540b0e630.json","type":"application/json","size":224},{"uid":"6b6b090c4b9d7743","name":"Payload","source":"6b6b090c4b9d7743.json","type":"application/json","size":2},{"uid":"8877fdf5b6cd8546","name":"Timestamp","source":"8877fdf5b6cd8546.txt","type":"text/plain","size":19},{"uid":"841c65f11efa7468","name":"Status Code","source":"841c65f11efa7468.txt","type":"text/plain","size":3},{"uid":"ba542bd210376fae","name":"Response Headers","source":"ba542bd210376fae.json","type":"application/json","size":228},{"uid":"6b77865dfe3330b2","name":"Response Text","source":"6b77865dfe3330b2.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_08_PATCH_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_08_PATCH_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC292', 'item': 'ref_number_1', 'input': 'letras'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"64add6fdec2296cf.json","parameterValues":["{'id': 'DR-TC292', 'item': 'ref_number_1', 'input': 'letras'}"]}