{"uid":"e04b95462d762940","name":"DR-TC220: Verificar fallo en el registro de paciente con método HTTP incorrecto GET","fullName":"tests.Patient.test_DR_US_06_POST_patient#test_Verificar_fallo_en_el_registro_de_paciente_con_metodo_HTTP_incorrecto","historyId":"54c3b48099b7dd884368fdb59db6503b","time":{"start":1761858920785,"stop":1761858920934,"duration":149},"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC220', 'item': 'GET'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"date\", http_methods_invalid)\n    def test_Verificar_fallo_en_el_registro_de_paciente_con_metodo_HTTP_incorrecto(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar fallo en el registro de paciente con método HTTP incorrecto {date['item']}\")\n        request=build_patient_payload()\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(date['item'], get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_responde_falled_http(response, StaticDataModules.patients.name, date['id'])\n\ntests/Patient/test_DR_US_06_POST_patient.py:297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'patients', type = 'DR-TC220'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC220\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_patient/assertions_patient.py:131: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: el mensaje del error 400 esta mal escrito\n\nAssertionError","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC220', 'item': 'GET'}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @pytest.mark.xfail(reason= \"bug conocido: el mensaje del error 400 esta mal escrito\")\n    @pytest.mark.parametrize(\"date\", http_methods_invalid)\n    def test_Verificar_fallo_en_el_registro_de_paciente_con_metodo_HTTP_incorrecto(get_url,date):\n        allure.dynamic.title(f\"{date['id']}: Verificar fallo en el registro de paciente con método HTTP incorrecto {date['item']}\")\n        request=build_patient_payload()\n        assert_schema(request, \"schema_input.json\", StaticDataModules.patients.name)\n        assert_payload_patient(request)\n        response = request_function(date['item'], get_url, StaticDataModules.patients.value,\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_patient())\n>       assert_responde_falled_http(response, StaticDataModules.patients.name, date['id'])\n\ntests/Patient/test_DR_US_06_POST_patient.py:297: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, file = 'patients', type = 'DR-TC220'\n\n    def assert_responde_falled_http(response, file, type):\n        if type == \"DR-TC220\":\n            assert_response_status_code(response.status_code, StaticStatus.bad_request.value)\n>           assert \"<title>Error 400 (Bad Request)!!!</title>\" in response.text\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError\n\nsrc/assertions/assertions_patient/assertions_patient.py:131: AssertionError","steps":[],"attachments":[{"uid":"813eda4be5f5ec39","name":"HTTP Method","source":"813eda4be5f5ec39.txt","type":"text/plain","size":3},{"uid":"f55808ea1c9bf72d","name":"Domain","source":"f55808ea1c9bf72d.txt","type":"text/plain","size":49},{"uid":"3c2346ff3dd73ee9","name":"Request URL","source":"3c2346ff3dd73ee9.txt","type":"text/plain","size":74},{"uid":"fd8846d8686d938a","name":"Headers","source":"fd8846d8686d938a.json","type":"application/json","size":254},{"uid":"4d3a0990a9556a62","name":"Payload","source":"4d3a0990a9556a62.json","type":"application/json","size":382},{"uid":"6852b5ac1d3f59c6","name":"Timestamp","source":"6852b5ac1d3f59c6.txt","type":"text/plain","size":19},{"uid":"10b50691921fd761","name":"Status Code","source":"10b50691921fd761.txt","type":"text/plain","size":3},{"uid":"631c15e5d1bdcf85","name":"Response Headers","source":"631c15e5d1bdcf85.json","type":"application/json","size":145},{"uid":"1845d3ec19115990","name":"Response Text","source":"1845d3ec19115990.txt","type":"text/plain","size":1555},{"uid":"d04143fadcd489f5","name":"log","source":"d04143fadcd489f5.txt","type":"text/plain","size":2913}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"trivial"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_06_POST_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_06_POST_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC220', 'item': 'GET'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[],"tags":["negative","regression"]},"source":"e04b95462d762940.json","parameterValues":["{'id': 'DR-TC220', 'item': 'GET'}"]}