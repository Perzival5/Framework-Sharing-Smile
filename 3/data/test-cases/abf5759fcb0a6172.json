{"uid":"abf5759fcb0a6172","name":"DR-TC293: Verificar que no se pueda actualizar ref_number_2 con un valor inválido","fullName":"tests.Patient.test_DR_US_08_PATCH_patient#test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido","historyId":"f72db156d90be6555e9fc690215e95c7","time":{"start":1761859011910,"stop":1761859012120,"duration":210},"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC293', 'input': 'letras', 'item': 'ref_number_2'}\nsetup_patient = {'address': '0665 Wallace Lakes Suite 163\\nAguilarburgh, LA 57382', 'city': 'Johnport', 'country': 'PE', 'date_of_birth': '2019-07-26', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761858849264,"stop":1761858849264,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_url","time":{"start":1761858849265,"stop":1761858849265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_patient","time":{"start":1761859010852,"stop":1761859011910,"duration":1058},"status":"passed","steps":[],"attachments":[{"uid":"87a3f54417c6e436","name":"HTTP Method","source":"87a3f54417c6e436.txt","type":"text/plain","size":4},{"uid":"7b094bc5cc8ab8b4","name":"Domain","source":"7b094bc5cc8ab8b4.txt","type":"text/plain","size":49},{"uid":"e2a783667d1404ff","name":"Request URL","source":"e2a783667d1404ff.txt","type":"text/plain","size":74},{"uid":"acc7446ebfab81b1","name":"Headers","source":"acc7446ebfab81b1.json","type":"application/json","size":254},{"uid":"aebb862e338a5d45","name":"Payload","source":"aebb862e338a5d45.json","type":"application/json","size":380},{"uid":"8c3d0a8f1aecd0fc","name":"Timestamp","source":"8c3d0a8f1aecd0fc.txt","type":"text/plain","size":19},{"uid":"ca8868fef6eaebf2","name":"Status Code","source":"ca8868fef6eaebf2.txt","type":"text/plain","size":3},{"uid":"b844a08aed0c6eb3","name":"Response Headers","source":"b844a08aed0c6eb3.json","type":"application/json","size":253},{"uid":"24425f8aa198c5fe","name":"Response Payload","source":"24425f8aa198c5fe.json","type":"application/json","size":517}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"testStage":{"status":"skipped","statusMessage":"XFAIL bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\n\nAssertionError: Status esperado 500, Status obtenido 200","statusTrace":"get_url = 'https://project-x-829879158579.southamerica-west1.run.app/api/v1/'\ndate = {'id': 'DR-TC293', 'input': 'letras', 'item': 'ref_number_2'}\nsetup_patient = {'address': '0665 Wallace Lakes Suite 163\\nAguilarburgh, LA 57382', 'city': 'Johnport', 'country': 'PE', 'date_of_birth': '2019-07-26', ...}\n\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.xfail(reason= \"bug conocido: dni, ref_number_1, ref_number_2 y country se pueden actualizar con un valor invalido\")\n    @pytest.mark.parametrize(\"date\", input_invalid)\n    def test_Verificar_que_no_se_pueda_actualizar_un_paciente_con_un_valor_invalido(get_url,date,setup_patient):\n        allure.dynamic.title(f\"{date['id']}: Verificar que no se pueda actualizar {date['item']} con un valor inválido\")\n        request=build_patch_payload(date['item'], date['input'])\n        assert_schema(request, \"schema_input_patch.json\", StaticDataModules.patients.name)\n        assert_field_value_response(request, date['item'], date['input'])\n        response = request_function(StaticDataVerbs.patch.value, get_url, f\"{StaticDataModules.patients.value}{setup_patient['id']}\",\n                                    header_type=StaticDataHeaders.header_patient.value, payload=request, files=get_file_edit())\n>       assert_response_status_code(response.status_code, StaticStatus.internal_server_error.value)\n\ntests/Patient/test_DR_US_08_PATCH_patient.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nstatus_code = 200, expected_code = 500\n\n    def assert_response_status_code(status_code, expected_code):\n>       assert status_code == expected_code, f\"Status esperado {expected_code}, Status obtenido {status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Status esperado 500, Status obtenido 200\n\nsrc/assertions/global_assertions.py:7: AssertionError","steps":[],"attachments":[{"uid":"5b332605cd3bf5c3","name":"HTTP Method","source":"5b332605cd3bf5c3.txt","type":"text/plain","size":5},{"uid":"1ddb897fff663c19","name":"Domain","source":"1ddb897fff663c19.txt","type":"text/plain","size":49},{"uid":"1702e4147d213f9c","name":"Request URL","source":"1702e4147d213f9c.txt","type":"text/plain","size":77},{"uid":"994464cfae720d98","name":"Headers","source":"994464cfae720d98.json","type":"application/json","size":254},{"uid":"5db3c7979e7f1639","name":"Payload","source":"5db3c7979e7f1639.json","type":"application/json","size":26},{"uid":"73a2ed478a104b0a","name":"Timestamp","source":"73a2ed478a104b0a.txt","type":"text/plain","size":19},{"uid":"dfb0f98ab07fb97b","name":"Status Code","source":"dfb0f98ab07fb97b.txt","type":"text/plain","size":3},{"uid":"60fc67ce3ee18650","name":"Response Headers","source":"60fc67ce3ee18650.json","type":"application/json","size":253},{"uid":"b78dd7fc100d8fe0","name":"Response Payload","source":"b78dd7fc100d8fe0.json","type":"application/json","size":515},{"uid":"4180478155b1efaf","name":"log","source":"4180478155b1efaf.txt","type":"text/plain","size":4661}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":10,"hasContent":true},"afterStages":[{"name":"setup_patient::0","time":{"start":1761859012128,"stop":1761859012322,"duration":194},"status":"passed","steps":[],"attachments":[{"uid":"ce1fd5dd47c33690","name":"HTTP Method","source":"ce1fd5dd47c33690.txt","type":"text/plain","size":6},{"uid":"533960a7fca7e0b8","name":"Domain","source":"533960a7fca7e0b8.txt","type":"text/plain","size":49},{"uid":"b75a7850cff199ce","name":"Request URL","source":"b75a7850cff199ce.txt","type":"text/plain","size":77},{"uid":"3ffccfd85fef1cbf","name":"Headers","source":"3ffccfd85fef1cbf.json","type":"application/json","size":224},{"uid":"288cd7183248ff64","name":"Payload","source":"288cd7183248ff64.json","type":"application/json","size":2},{"uid":"4ae5de76ba672b90","name":"Timestamp","source":"4ae5de76ba672b90.txt","type":"text/plain","size":19},{"uid":"132b2a48ca676959","name":"Status Code","source":"132b2a48ca676959.txt","type":"text/plain","size":3},{"uid":"6dc175f0ca59a773","name":"Response Headers","source":"6dc175f0ca59a773.json","type":"application/json","size":228},{"uid":"dc13b34959902f64","name":"Response Text","source":"dc13b34959902f64.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":9,"hasContent":true}],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.Patient"},{"name":"suite","value":"test_DR_US_08_PATCH_patient"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2417-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Patient.test_DR_US_08_PATCH_patient"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"date","value":"{'id': 'DR-TC293', 'item': 'ref_number_2', 'input': 'letras'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","regression"]},"source":"abf5759fcb0a6172.json","parameterValues":["{'id': 'DR-TC293', 'item': 'ref_number_2', 'input': 'letras'}"]}